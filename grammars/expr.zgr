{
  "ll1": {
    "start": "start",
    "rules": [
      "start := list(sub, 'comma') -> Statements( list=$0 )",
      "sub := item -> Item( name=$0 ) | expr",
      "item := 'b' | 'a'"
    ]
  },
  "expr": {
    "binding_power": [
      {"associativity": "left", "terminals": ["add", "subtract"]},
      {"associativity": "left", "terminals": ["multiply", "divide"]},
      {"associativity": "unary", "terminals": ["subtract"]},
      {"associativity": "left", "terminals": ["lparen"]}
    ],
    "rules": [
      "expr := 'identifier' + ^'lparen' + list(expr, 'comma') + 'rparen' -> FuncCall( name=$0, params=$2 )",
      "expr := expr + 'multiply' + expr -> Mul( l=$0, r=$2 )",
      "expr := expr + 'divide' + expr -> Div( l=$0, r=$2 )",
      "expr := expr + 'add' + expr -> Add( l=$0, r=$2 )",
      "expr := expr + 'subtract' + expr -> Sub( l=$0, r=$2 )",
      "expr := 'subtract' + expr -> UMinus( arg=$1 )",
      "expr := 'lsquare' + list(expr, 'comma') + 'rsquare' -> ListDecl( items=$1 )",
      "expr := 'lbrace' + list(expr, 'comma') + 'rbrace' -> SetDecl( items=$1 )",
      "expr := 'lparen' + expr + 'rparen' -> $1",
      "expr := 'identifier' | 'number'"
    ]
  }
}
