grammar {
  lexer<python> {
    partials {
      r'[a-zA-Z:_\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c-\u200d\u2070-\u218f\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\U00010000-\U000EFFFF]' -> _NameStartChar
      r'[a-zA-Z0-9-\.:_\u00b7\u0300-\u036f\u203f-\u2040\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c-\u200d\u2070-\u218f\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\U00010000-\U000EFFFF]' -> _NameChar
      r'%{%_NameStartChar%}({%_NameChar%})*;' -> _PEReference
      r'&{%_NameStartChar%}({%_NameChar%})*;' -> _EntityRef
      r'&#[0-9]+;' -> _DecCharRef
      r'&#x[0-9a-fA-F]+;' -> _HexCharRef
    }

    r'\s+' -> null
    r'<([a-z]+)' -> start_tag(:start_tag)
    r'</([a-z]+)>' -> end_tag(:end_tag)
    r'[a-z]+' -> :string
    r'{%_NameStartChar%}({%_NameChar%})*' -> :name
    r'"' -> start_dquote_string(:dquote)
    r'\'' -> start_squote_string(:squote)

    r'<\?xml' -> :xml_decl_start
    r'\?>' -> :xml_decl_end
    r'version' -> :version
    r'=' -> :eq
    r'(?:"(1.1)"|\'(1.1)\')' -> version_number(:version_number)
    r'<!DOCTYPE' -> :doctype_start
    r'>' -> :doctype_end
    r'\[' -> :lsquare
    r'\]' -> :rsquare
    r'<!ELEMENT' -> element(:element_start)
    r'<!ATTLIST' -> attlist(:att_list_start)
    r'<!ENTITY' -> entity(:entity_start)

    mode<element> {
      r'\s+' -> null
      r'{%_NameStartChar%}({%_NameChar%})*' -> :name
      r'EMPTY' -> :empty
      r'ANY' -> :any
      r'#PCDATA' -> :pcdata
      r'\(' -> :lparen
      r'\)' -> :rparen
      r'\|' -> :pipe
      r'\?' -> :qmark
      r'\*' -> :asterisk
      r'\+' -> :plus
      r',' -> :comma
      r'>' -> pop(:element_end)
    }

    mode<attlist> {
      r'NOTATION' -> notation(:notation)
      r'\(' -> :lparen
      r'\)' -> :rparen
      r'\|' -> :pipe
      r'{%_NameStartChar%}({%_NameChar%})*' -> :name
      r'({%_NameChar%})+' -> :nmtoken
      r'>' -> pop(:att_list_end)
    }

    mode<notation> {
      r'\s+' -> null
      r'{%_NameStartChar%}({%_NameChar%})*' -> :name
      r'SYSTEM' -> :system
      r'PUBLIC' -> :public
      r'"([a-zA-Z0-9\n\r\ -\'\(\)\+,\./:=\?;!\*#@\$_%]*)"' -> string(:pubid_literal)
      r'\'([a-zA-Z0-9\n\r\ -\(\)\+,\./:=\?;!\*#@\$_%]*)\'' -> string(:pubid_literal)
      r'"([^"]*)"' -> string(:system_literal)
      r'([^\']*)' -> string(:system_literal)
    }

    mode<entity> {
      r'>' -> pop(:entity_end)
      r'%' -> :percent
      r'{%_NameStartChar%}({%_NameChar%})*' -> :name
    }

    mode<tag_attrs> {
      r'\s+' -> null
      r'[a-z]+' -> :attribute
      r'=' -> :equals
      r'"[^"]+"' -> :string
      r'>' -> terminate_start_tag(:end_attrs)
    }

    mode<dquote_string> {
      r'"' -> end_string(:dquote)
      r'[^%&"]+' -> :string
      r'{%_PEReference%}' -> :pe_reference
      r'{%_EntityRef%}' -> :entity_ref
      r'{%_DecCharRef%}' -> :dec_char_ref
      r'{%_HexCharRef%}' -> :hex_char_ref
    }
    <code>
def init():
    return {'stack': []}

def start_tag(ctx, mode, match, groups, terminal, resource, line, col):
    print('start_tag(): {} {}'.format(ctx['stack'], groups[0]))
    ctx['stack'].append(groups[0])
    return default_action(ctx, 'tag_attrs', groups[0], groups, terminal, resource, line, col)

def terminate_start_tag(ctx, mode, match, groups, terminal, resource, line, col):
    print('terminate_start_tag(): {} {}'.format(ctx['stack'], match))
    return default_action(ctx, 'default', '', groups, terminal, resource, line, col)

def end_tag(ctx, mode, match, groups, terminal, resource, line, col):
    tag = ctx['stack'].pop()
    if groups[0] != tag:
        raise SyntaxError("Unmatched tag: " + tag)
    print('end_tag(): {} {}'.format(ctx['stack'], groups[0]))
    return default_action(ctx, mode, groups[0], groups, terminal, resource, line, col)

def destroy(ctx):
    if len(ctx['stack']) > 0:
        raise SyntaxError("Unclosed tags: {}".format(ctx['stack']))
    </code>
  }
  parser<ll1> {
    $document = $prolog $element list($misc)
        $prolog = optional($xml_decl) list($misc) optional($doctype)
            $xml_decl = :xml_decl_start $version_info optional($encoding_decl) optional($sd_decl) :xml_decl_end
                $version_info = :version :eq :version_number
            $doctype = $doctype_decl list($misc)
            $doctype_decl = :doctype_start :name optional($external_id) optional($doctype_decl_sub) :doctype_end
            $doctype_decl_sub = :lsquare $int_subset :rsquare
            $int_subset = list($int_subset_sub)
            $int_subset_sub = $markup_decl | :pe_reference
            $markup_decl = $element_decl | $att_list_decl | $entity_decl | $notation_decl | $pi | $comment
            $element_decl = :element_start :name $content_spec :element_end
                $content_spec = :empty | :any | $mixed | $children
                $mixed = :mixed_hint :lparen :pcdata optional($mixed_sub) :rparen
                    $mixed_sub = :pipe list(:name, :pipe)
                $children = $children_sub optional($children_qualifier)
                $children_sub = :choice_hint :lparen mslist($cp, :pipe, 2) :rparen
                $children_sub = :seq_hint :lparen list($cp, :comma) :rparen
                $children_qualifier = :qmark | :plus | :asterisk
                $cp = $cp_sub optional($children_qualifier)
                $cp_sub = :name | $choice | $seq
            $att_list_decl = :att_list_start :name list($att_def) :att_list_end
                $att_def = :name $att_type $default_decl
                $att_type = :cdata | :id | :idref | :idrefs | :entity | :entities | :nmtoken | $nmtokens | $enumerated_type
                $enumerated_type = $notation_type | $enumeration
                    $notation_type = :notation :lparen mslist(:name, :pipe, 1) :rparen
                    $enumeration = :lparen mslist(:nmtoken, :pipe, 1) :rparen
            $entity_decl = $ge_decl | $pe_decl
            $ge_decl = :ge_hint :entity_start :name $entity_def :entity_end
                $entity_def = $entity_value
            $pe_decl = :pe_hint :entity_start :percent :name $pe_def :entity_end
                $pe_def = $entity_value |
        $misc = $comment | $pi
    $comment = :comment_start :comment_text :comment_end
    $pi = :pi_start :pi_target :pi_end
    $entity_value = :dquote list($entity_value_part) :dquote
    $entity_value = :squote list($entity_value_part) :squote
    $entity_value_part = :string | :pe_reference | :entity_ref | :dec_char_ref | :hex_char_ref
    $external_id = :system $system_literal | :public :pubid_literal $system_literal
        $system_literal = :system_literal | :pubid_literal
  }
}
