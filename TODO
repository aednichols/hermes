2.0 TODO
========

Document public interface for all targets
-----------------------------------------

Document the interface for the public classes (just CompositeGrammar?) in hermes.grammar:

  HermesGrammar:
    __init__(name, rules)
    start - self.rules[0].nonterminal
    rules - self.rules
    terminals - list of all terminals
    nonterminals - list of all nonterminals
    standard_terminals - list of terminals that are non-abstract (i.e. not :_empty and :_end)
    ll1_nonterminals - list of nonterminals that aren't expression nonterminals
    expression_nonterminals - list of expression nonterminals
    parse_table - 2x2 matrix [nonterminal][terminal] = rule
    must_consume_token(nonterminal) - returns true if there is no production such that $nonterminal = :_empty
    first(production|nonterminal) - list of terminals in first set
    follow(nonterminal) - list of terminals in follow set
    get_rules(nonterminal) - list of rules for this nonterminal
    get_expanded_rules(nonterminal) - list of expanded rules for this nonterminal
    __str__()

  Rule
    id - auto assigned integer identifier
    nonterminal - LHS of this rule
    is_empty - true if $nonterminal = :_empty
    production - Production object
    operator (optional) - Terminal
    __eq__(), __str__()

  Production:
    morphemes - list of morphemes in this production

  ExprRule(Rule)
    nud_production - Production
    led_production - Production
    nudAst - AstSpecification or AstTranslation
    ledAst - AstSpecification or AstTranslation
    __str__()

  NonTerminal, Terminal
    id - auto assigned integer identifier
    string - string representation, without leading $ or :

  Operator
    operator - Terminal of this operator
    associativity - ['left', 'right', 'unary']
    binding_power - integer binding power.  How closely this binds relative to other operators

  AstSpecification
    name
    parameters

  AstTranslation
    idx

  ------------------------

  Grammar
    - rules (Rule)
    - terminals
    - nonterminals
    - macros
    - start
    - must_consume_tokens(nonterminal) [is_empty]
    - is_standard_terminal(terminal)
    - is_abstract_terminal(terminal)
    - conflicts
  LL1Grammar(Grammar)
    - first (dict)
    - follow (dict)
  ExpressionGrammar(Grammar)
    - nud
    - led
    - precedence
  CompositeGrammar
    - ll1_grammar
    - expression_grammars
  LL1Rule
    - id, morphemes
    - nonterminal
    - production
  ExpressionRule
    - id, morphemes
    - nud
    - led
  NonTerminal
    - id, name
  Terminal
    - id, name
