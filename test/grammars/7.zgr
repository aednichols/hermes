{
  "ll1": {
    "start": "start",
    "rules": [
      "start := list(sub, 'comma')",
      "sub := item | _expr",
      "item := 'b' | 'a'",
      "type_name := 'int' | 'char'",
      "comma_opt := 'comma' | _empty",
      "initializer_list_item := 'item'"
    ]
  },
  "expr": [
    {
      "nonterminal": "_expr",
      "binding_power": [
        {"associativity": "left", "terminals": ["add", "subtract"]},
        {"associativity": "left", "terminals": ["multiply", "divide"]},
        {"associativity": "left", "terminals": ["lbrace", "lparen"]},
        {"associativity": "unary", "terminals": ["sub"]}
      ],
      "rules": [
        "_expr := _expr + 'multiply' + _expr",
        "_expr := _expr + 'divide' + _expr",
        "_expr := _expr + 'add' + _expr",
        "_expr := _expr + 'subtract' + _expr",
        "_expr := 'subtract' + _expr",
        "_expr := {'lsquare' + list(_expr, 'comma') + 'rsquare'}",
        "_expr := {'lbrace' + list(_expr, 'comma') + 'rbrace'}",
        "_expr := {'identifier'} + {'lparen' + list(_expr, 'comma') + 'rparen'} -> FunctionCall( name=$$, params=$2 )",
        "_expr := {'lparen_cast' + type_name + 'rparen' -> $1} + {'lbrace' + list(initializer_list_item, 'comma') + comma_opt + 'rbrace'} -> TypeInitializion( type=$1, initializer=$4 )",
        "_expr := {'lparen' + _expr + 'rparen'}",
        "_expr := {'identifier'} | {'number'}"
      ]
    }
  ]
}
