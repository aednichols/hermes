$add_op -> :do, :dot, :end, :equal, :gt, :gteq, :ident, :lparen, :lt, :lteq, :minus, :number, :plus, :pound, :rparen, :semi, :then
$block -> :dot, :semi
$block_const -> :var
$block_const1 -> :var
$block_proc -> :begin, :call, :ident, :if, :while
$block_var -> :procedure
$block_var1 -> :semi
$condition -> :do, :then
$expression -> :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :pound, :rparen, :semi, :then
$expression_sub1 -> :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :pound, :rparen, :semi, :then
$factor -> :divide, :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :minus, :plus, :pound, :rparen, :semi, :then, :times
$ident -> :assign, :comma, :divide, :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :minus, :plus, :pound, :rparen, :semi, :then, :times
$mul_op -> :divide, :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :minus, :plus, :pound, :rparen, :semi, :then, :times
$number -> :comma, :divide, :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :minus, :plus, :pound, :rparen, :semi, :then, :times, :var
$op -> :ident, :lparen, :minus, :number, :plus
$program -> :_eos
$statement -> :dot, :end, :semi
$statement_sub1 -> :end
$term -> :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :minus, :plus, :pound, :rparen, :semi, :then
$term_sub1 -> :do, :dot, :end, :equal, :gt, :gteq, :lt, :lteq, :minus, :plus, :pound, :rparen, :semi, :then
$unary_add_op -> :ident, :lparen, :number
