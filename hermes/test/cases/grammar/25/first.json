$_gen0 -> :_empty, :binary_number, :class, :decimal_number, :e, :for, :function, :hexadecimal_number, :identifier, :if, :import, :lbrace, :lparen, :lsquare, :octal_number, :subtract
$_gen1 -> :_empty, :identifier
$_gen2 -> :_empty, :private, :public
$_gen3 -> :_empty, :binary_number, :decimal_number, :e, :hexadecimal_number, :identifier, :lbrace, :lparen, :lsquare, :octal_number, :subtract
$class_atom -> :function, :identifier
$class_statement -> :private, :public
$classdef -> :class
$e -> :binary_number, :decimal_number, :e, :hexadecimal_number, :identifier, :lbrace, :lparen, :lsquare, :octal_number, :subtract
$for -> :for
$funcdef -> :function
$if -> :if
$if_body -> :lbrace
$import -> :import
$param -> :identifier
$program -> :_empty, :binary_number, :class, :decimal_number, :e, :for, :function, :hexadecimal_number, :identifier, :if, :import, :lbrace, :lparen, :lsquare, :octal_number, :subtract
$simple_statement -> :binary_number, :decimal_number, :e, :for, :hexadecimal_number, :identifier, :if, :import, :lbrace, :lparen, :lsquare, :octal_number, :subtract
$statement -> :binary_number, :class, :decimal_number, :e, :for, :function, :hexadecimal_number, :identifier, :if, :import, :lbrace, :lparen, :lsquare, :octal_number, :subtract
$terminated__expr -> :binary_number, :decimal_number, :e, :hexadecimal_number, :identifier, :lbrace, :lparen, :lsquare, :octal_number, :subtract
$token -> :divide, :do, :equals, :function, :greater_than, :greater_than_equal, :less_than, :less_than_equal, :minus, :multiply, :semicolon, :string, :while
