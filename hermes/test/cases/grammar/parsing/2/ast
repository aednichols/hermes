(Grammar:
  body=[
    (Parser:
      rules=[
        (Rule:
          nonterminal=<nonterminal (line 3 col 6) `start`>,
          production=[
            (Production:
              morphemes=[
                (Macro:
                  name=<identifier (line 3 col 14) `list`>,
                  parameters=[
                    <nonterminal (line 3 col 20) `statement`>,
                    <terminal (line 3 col 32) `comma`>
                  ]
                )
              ],
              ast=(AstTransformation:
                name=<identifier (line 3 col 42) `Program`>,
                parameters=[
                  (AstParameter:
                    name=<identifier (line 3 col 51) `statements`>,
                    index=<nonterminal_reference (line 3 col 63) `0`>
                  )
                ]
              )
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 4 col 6) `start`>,
          production=[
            (Production:
              morphemes=[
                <terminal (line 4 col 15) `_empty`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 5 col 6) `statement`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 5 col 19) `e`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 6 col 6) `statement`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 6 col 19) `assignstatement`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 7 col 6) `statement`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 7 col 19) `forstatement`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 8 col 6) `assignstatement`>,
          production=[
            (Production:
              morphemes=[
                <terminal (line 8 col 25) `identifier`>,
                <terminal (line 8 col 37) `eq`>,
                <nonterminal (line 8 col 41) `assignstatementsub`>
              ],
              ast=(AstTransformation:
                name=<identifier (line 8 col 63) `Assign`>,
                parameters=[
                  (AstParameter:
                    name=<identifier (line 8 col 71) `var`>,
                    index=<nonterminal_reference (line 8 col 76) `0`>
                  ),
                  (AstParameter:
                    name=<identifier (line 8 col 79) `val`>,
                    index=<nonterminal_reference (line 8 col 84) `2`>
                  )
                ]
              )
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 9 col 6) `assignstatementsub`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 9 col 28) `assignstatement`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 10 col 6) `assignstatementsub`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 10 col 28) `e`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 11 col 6) `complexexpression`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 11 col 27) `e`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 12 col 6) `complexexpression`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 12 col 27) `assignstatement`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 13 col 6) `forstatement`>,
          production=[
            (Production:
              morphemes=[
                <terminal (line 13 col 22) `for`>,
                <terminal (line 13 col 27) `lparen`>,
                <nonterminal (line 13 col 35) `fordeclstatement`>,
                <terminal (line 13 col 53) `semi`>,
                <nonterminal (line 13 col 59) `forcondstatement`>,
                <terminal (line 13 col 77) `semi`>,
                <nonterminal (line 13 col 83) `foriterstatement`>,
                <terminal (line 13 col 101) `rparen`>,
                <terminal (line 13 col 109) `lbrace`>,
                <nonterminal (line 13 col 117) `forbody`>,
                <terminal (line 13 col 126) `rbrace`>
              ],
              ast=(AstTransformation:
                name=<identifier (line 13 col 136) `For`>,
                parameters=[
                  (AstParameter:
                    name=<identifier (line 13 col 141) `decl`>,
                    index=<nonterminal_reference (line 13 col 147) `2`>
                  ),
                  (AstParameter:
                    name=<identifier (line 13 col 150) `cond`>,
                    index=<nonterminal_reference (line 13 col 156) `4`>
                  ),
                  (AstParameter:
                    name=<identifier (line 13 col 159) `iter`>,
                    index=<nonterminal_reference (line 13 col 165) `6`>
                  ),
                  (AstParameter:
                    name=<identifier (line 13 col 168) `body`>,
                    index=<nonterminal_reference (line 13 col 174) `9`>
                  )
                ]
              )
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 14 col 6) `fordeclstatement`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 14 col 26) `complexexpression`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 15 col 6) `fordeclstatement`>,
          production=[
            (Production:
              morphemes=[
                <terminal (line 15 col 26) `_empty`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 16 col 6) `forcondstatement`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 16 col 26) `e`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 17 col 6) `forcondstatement`>,
          production=[
            (Production:
              morphemes=[
                <terminal (line 17 col 26) `_empty`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 18 col 6) `foriterstatement`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 18 col 26) `complexexpression`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 19 col 6) `foriterstatement`>,
          production=[
            (Production:
              morphemes=[
                <terminal (line 19 col 26) `_empty`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 20 col 6) `forbody`>,
          production=[
            (Production:
              morphemes=[
                <nonterminal (line 20 col 17) `statement`>,
                <terminal (line 20 col 28) `semi`>,
                <nonterminal (line 20 col 34) `forbody`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 21 col 6) `forbody`>,
          production=[
            (Production:
              morphemes=[
                <terminal (line 21 col 17) `_empty`>
              ],
              ast=None
            )
          ]
        ),
        (Rule:
          nonterminal=<nonterminal (line 22 col 6) `e`>,
          production=(ExpressionParser:
            rules=[
              (ExpressionRule:
                precedence=(Precedence:
                  marker=<asterisk (line 23 col 8) `*`>,
                  associativity=<left (line 23 col 10) `left`>
                ),
                nonterminal=<nonterminal (line 23 col 17) `e`>,
                production=(InfixProduction:
                  morphemes=[
                    <nonterminal (line 23 col 17) `e`>,
                    <terminal (line 23 col 25) `add`>,
                    <nonterminal (line 23 col 17) `e`>
                  ],
                  ast=(AstTransformation:
                    name=<identifier (line 23 col 35) `Add`>,
                    parameters=[
                      (AstParameter:
                        name=<identifier (line 23 col 40) `lhs`>,
                        index=<nonterminal_reference (line 23 col 45) `0`>
                      ),
                      (AstParameter:
                        name=<identifier (line 23 col 48) `rhs`>,
                        index=<nonterminal_reference (line 23 col 53) `2`>
                      )
                    ]
                  )
                )
              ),
              (ExpressionRule:
                precedence=(Precedence:
                  marker=<dash (line 24 col 8) `-`>,
                  associativity=<left (line 24 col 10) `left`>
                ),
                nonterminal=<nonterminal (line 24 col 17) `e`>,
                production=(InfixProduction:
                  morphemes=[
                    <nonterminal (line 24 col 17) `e`>,
                    <terminal (line 24 col 25) `sub`>,
                    <nonterminal (line 24 col 17) `e`>
                  ],
                  ast=(AstTransformation:
                    name=<identifier (line 24 col 35) `Subtract`>,
                    parameters=[
                      (AstParameter:
                        name=<identifier (line 24 col 45) `lhs`>,
                        index=<nonterminal_reference (line 24 col 50) `0`>
                      ),
                      (AstParameter:
                        name=<identifier (line 24 col 53) `rhs`>,
                        index=<nonterminal_reference (line 24 col 58) `2`>
                      )
                    ]
                  )
                )
              ),
              (ExpressionRule:
                precedence=(Precedence:
                  marker=<asterisk (line 25 col 8) `*`>,
                  associativity=<left (line 25 col 10) `left`>
                ),
                nonterminal=<nonterminal (line 25 col 17) `e`>,
                production=(InfixProduction:
                  morphemes=[
                    <nonterminal (line 25 col 17) `e`>,
                    <terminal (line 25 col 25) `mul`>,
                    <nonterminal (line 25 col 17) `e`>
                  ],
                  ast=(AstTransformation:
                    name=<identifier (line 25 col 35) `Multiply`>,
                    parameters=[
                      (AstParameter:
                        name=<identifier (line 25 col 45) `lhs`>,
                        index=<nonterminal_reference (line 25 col 50) `0`>
                      ),
                      (AstParameter:
                        name=<identifier (line 25 col 53) `rhs`>,
                        index=<nonterminal_reference (line 25 col 58) `2`>
                      )
                    ]
                  )
                )
              ),
              (ExpressionRule:
                precedence=(Precedence:
                  marker=<dash (line 26 col 8) `-`>,
                  associativity=<left (line 26 col 10) `left`>
                ),
                nonterminal=<nonterminal (line 26 col 17) `e`>,
                production=(InfixProduction:
                  morphemes=[
                    <nonterminal (line 26 col 17) `e`>,
                    <terminal (line 26 col 25) `div`>,
                    <nonterminal (line 26 col 17) `e`>
                  ],
                  ast=(AstTransformation:
                    name=<identifier (line 26 col 35) `Divide`>,
                    parameters=[
                      (AstParameter:
                        name=<identifier (line 26 col 43) `lhs`>,
                        index=<nonterminal_reference (line 26 col 48) `0`>
                      ),
                      (AstParameter:
                        name=<identifier (line 26 col 51) `rhs`>,
                        index=<nonterminal_reference (line 26 col 56) `2`>
                      )
                    ]
                  )
                )
              ),
              (ExpressionRule:
                precedence=(Precedence:
                  marker=<asterisk (line 27 col 8) `*`>,
                  associativity=<unary (line 27 col 10) `unary`>
                ),
                nonterminal=<nonterminal (line 27 col 18) `e`>,
                production=(PrefixProduction:
                  morphemes=[
                    <terminal (line 27 col 23) `sub`>,
                    <nonterminal (line 27 col 18) `e`>
                  ],
                  ast=(AstTransformation:
                    name=<identifier (line 27 col 33) `UMinus`>,
                    parameters=[
                      (AstParameter:
                        name=<identifier (line 27 col 41) `arg`>,
                        index=<nonterminal_reference (line 27 col 46) `1`>
                      )
                    ]
                  )
                )
              ),
              (ExpressionRule:
                precedence=None,
                nonterminal=<nonterminal (line 28 col 8) `e`>,
                production=(MixfixProduction:
                  nud=[
                    <terminal (line 28 col 13) `n`>
                  ],
                  nud_ast=None,
                  led=None,
                  ast=None
                )
              ),
              (ExpressionRule:
                precedence=None,
                nonterminal=<nonterminal (line 29 col 8) `e`>,
                production=(MixfixProduction:
                  nud=[
                    <terminal (line 29 col 13) `s`>
                  ],
                  nud_ast=None,
                  led=None,
                  ast=None
                )
              )
            ]
          )
        )
      ]
    )
  ]
)