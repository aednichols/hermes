(Grammar:
  body=[
    (Lexer:
      language=<identifier (line 2 col 9) `python`>,
      atoms=[
        (RegexPartials:
          list=[
            (RegexPartial:
              regex=<regex (line 4 col 7) `r'abc'`>,
              name=<regex_partial (line 4 col 17) `_abc`>
            ),
            (RegexPartial:
              regex=<regex (line 5 col 7) `r'xyz'`>,
              name=<regex_partial (line 5 col 17) `_xyz`>
            ),
            (RegexPartial:
              regex=<regex (line 6 col 7) `r'[0-9]+'`>,
              name=<regex_partial (line 6 col 20) `_num`>
            ),
            (RegexPartial:
              regex=<regex (line 7 col 7) `r'{%_xyz%}{%_abc%}'`>,
              name=<regex_partial (line 7 col 30) `_xyz_abc`>
            )
          ]
        ),
        (Regex:
          regex=<regex (line 9 col 5) `r'\s+'`>,
          options=None,
          onmatch=[
            (Null:

            )
          ]
        ),
        (Regex:
          regex=<regex (line 10 col 5) `r'{%_abc%}'`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 10 col 21) `abc`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 11 col 5) `r'{%_num%}'`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 11 col 21) `num`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 12 col 5) `r'{%_xyz%}{%_num%}[jkl]+'`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 12 col 35) `xyz`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 13 col 5) `r'{%_xyz_abc%}'`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 13 col 25) `xyz_abc`>,
              group=None
            )
          ]
        )
      ],
      code=None
    ),
    (Lexer:
      language=<identifier (line 15 col 9) `c`>,
      atoms=[
        (RegexPartials:
          list=[
            (RegexPartial:
              regex=<regex (line 17 col 7) `"abc"`>,
              name=<regex_partial (line 17 col 16) `_abc`>
            ),
            (RegexPartial:
              regex=<regex (line 18 col 7) `"xyz"`>,
              name=<regex_partial (line 18 col 16) `_xyz`>
            ),
            (RegexPartial:
              regex=<regex (line 19 col 7) `"[0-9]+"`>,
              name=<regex_partial (line 19 col 19) `_num`>
            ),
            (RegexPartial:
              regex=<regex (line 20 col 7) `"{%_xyz%}{%_abc%}"`>,
              name=<regex_partial (line 20 col 29) `_xyz_abc`>
            )
          ]
        ),
        (Regex:
          regex=<regex (line 22 col 5) `"\\s+"`>,
          options=None,
          onmatch=[
            (Null:

            )
          ]
        ),
        (Regex:
          regex=<regex (line 23 col 5) `"{%_abc%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 23 col 20) `abc`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 24 col 5) `"{%_num%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 24 col 20) `num`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 25 col 5) `"{%_xyz%}{%_num%}[jkl]+"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 25 col 34) `xyz`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 26 col 5) `"{%_xyz_abc%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 26 col 24) `xyz_abc`>,
              group=None
            )
          ]
        )
      ],
      code=None
    ),
    (Lexer:
      language=<identifier (line 28 col 9) `java`>,
      atoms=[
        (RegexPartials:
          list=[
            (RegexPartial:
              regex=<regex (line 30 col 7) `"abc"`>,
              name=<regex_partial (line 30 col 16) `_abc`>
            ),
            (RegexPartial:
              regex=<regex (line 31 col 7) `"xyz"`>,
              name=<regex_partial (line 31 col 16) `_xyz`>
            ),
            (RegexPartial:
              regex=<regex (line 32 col 7) `"[0-9]+"`>,
              name=<regex_partial (line 32 col 19) `_num`>
            ),
            (RegexPartial:
              regex=<regex (line 33 col 7) `"{%_xyz%}{%_abc%}"`>,
              name=<regex_partial (line 33 col 29) `_xyz_abc`>
            )
          ]
        ),
        (Regex:
          regex=<regex (line 35 col 5) `"\\s+"`>,
          options=None,
          onmatch=[
            (Null:

            )
          ]
        ),
        (Regex:
          regex=<regex (line 36 col 5) `"{%_abc%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 36 col 20) `abc`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 37 col 5) `"{%_num%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 37 col 20) `num`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 38 col 5) `"{%_xyz%}{%_num%}[jkl]+"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 38 col 34) `xyz`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 39 col 5) `"{%_xyz_abc%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 39 col 24) `xyz_abc`>,
              group=None
            )
          ]
        )
      ],
      code=None
    ),
    (Lexer:
      language=<identifier (line 41 col 9) `javascript`>,
      atoms=[
        (RegexPartials:
          list=[
            (RegexPartial:
              regex=<regex (line 43 col 7) `"abc"`>,
              name=<regex_partial (line 43 col 16) `_abc`>
            ),
            (RegexPartial:
              regex=<regex (line 44 col 7) `"xyz"`>,
              name=<regex_partial (line 44 col 16) `_xyz`>
            ),
            (RegexPartial:
              regex=<regex (line 45 col 7) `"[0-9]+"`>,
              name=<regex_partial (line 45 col 19) `_num`>
            ),
            (RegexPartial:
              regex=<regex (line 46 col 7) `"{%_xyz%}{%_abc%}"`>,
              name=<regex_partial (line 46 col 29) `_xyz_abc`>
            )
          ]
        ),
        (Regex:
          regex=<regex (line 48 col 5) `"\\s+"`>,
          options=None,
          onmatch=[
            (Null:

            )
          ]
        ),
        (Regex:
          regex=<regex (line 49 col 5) `"{%_abc%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 49 col 20) `abc`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 50 col 5) `"{%_num%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 50 col 20) `num`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 51 col 5) `"{%_xyz%}{%_num%}[jkl]+"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 51 col 34) `xyz`>,
              group=None
            )
          ]
        ),
        (Regex:
          regex=<regex (line 52 col 5) `"{%_xyz_abc%}"`>,
          options=None,
          onmatch=[
            (Terminal:
              name=<terminal (line 52 col 24) `xyz_abc`>,
              group=None
            )
          ]
        )
      ],
      code=None
    )
  ]
)