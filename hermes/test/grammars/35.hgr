grammar {
  lexer {
    r'\s+' -> null
    r'a' -> :a
    r'b' -> :b
    r'item' -> :item
    r'int' -> :int
    r'char' -> :char
    r',' -> :comma
    r'\+' -> :add
    r'-' -> :subtract
    r'\*' -> :multiply
    r'/' -> :divide
    r'\(' -> :lparen
    r'\)' -> :rparen
    r'\{' -> :lbrace
    r'\}' -> :rbrace
    r'\[' -> :lsquare
    r'\]' -> :rsquare
    r'[0-9]+' -> :number
    r'[a-zA-Z]+' -> :identifier

    code<go> << GO_CODE
    func post_filter(tokens []*Token) []*Token {
        for i, token := range tokens {
            if token.terminal.idStr == "lparen" && i < len(tokens)-1 {
                next := tokens[i+1]
                if next.terminal.idStr == "int" || next.terminal.idStr == "char" {
                    token.terminal = findTerminal("lparen_cast")
                }
            }
        }
        return tokens
    }
    GO_CODE

    code<python> << PYTHON
    def post_filter(tokens):
        for i, token in enumerate(tokens):
            if token.str == 'lparen':
                try:
                    next = tokens[i+1]
                    if next.str in ['int', 'char']:
                        token.str == 'lparen_cast'
                        token.id = terminals['lparen_cast']
                except IndexError:
                    pass
        return tokens
    PYTHON

    code<c> << C_CODE
    static TOKEN_LIST_T * post_filter(TOKEN_LIST_T *tokens) {
        for (int i = 0; i < tokens->ntokens; i++) {
            TOKEN_T * current = tokens->tokens[i];
            if (!strcmp(current->terminal->string, "lparen") && i < tokens->ntokens - 1) {
                TOKEN_T * next = tokens->tokens[i+1];
                if (!strcmp(next->terminal->string, "int") || !strcmp(next->terminal->string, "char")) {
                    current->terminal->string = "lparen_cast";
                    current->terminal->id = str_to_morpheme("lparen_cast");
                }
            }
        }
        return tokens;
    }
    C_CODE

    code<java> << JAVA
    public List<Terminal> post_filter(List<Terminal> tokens) {
        for (int i = 0; i < tokens.size(); i++) {
            if (tokens.get(i).terminal_str == "lparen" && i < tokens.size() - 1) {
                Terminal next = tokens.get(i+1);
                Terminal current = tokens.get(i);
                if (next.terminal_str.equals("int") || next.terminal_str.equals("char")) {
                    current.terminal_str = "lparen_cast";
                    current.id = terminal_map.get("lparen_cast").id();
                }
            }
        }
        return tokens;
    }
    JAVA

    code<javascript> << JAVASCRIPT
    function post_filter(tokens) {
        for (i = 0; i < tokens.length; i++) {
            if (tokens[i].str == 'lparen' && i < tokens.length - 1) {
                var next = tokens[i+1]
                if (next.str == 'int' || next.str == 'char') {
                    tokens[i].str = 'lparen_cast'
                    tokens[i].id = terminals['lparen_cast']
                }
            }
        }
        return tokens
    }
    JAVASCRIPT
  }
  parser {
    $start = list($sub, :comma)
    $sub = $item | $e
    $item = :a | :b
    $type_name = :int | :char
    $e = parser<expression> {
      (*:left) $e = $e :add $e -> Add(lhs=$0, rhs=$2)
      (-:left) $e = $e :subtract $e -> Subtract(lhs=$0, rhs=$2)
      (*:left) $e = $e :multiply $e -> Multiply(lhs=$0, rhs=$2)
      (-:left) $e = $e :divide $e -> Divide(lhs=$0, rhs=$2)
      (*:left) $e = :lparen_cast $type_name :rparen <=> :lbrace list(:item, :comma) :rbrace -> TypeInitializion( type=$1, initializer=$4 )
      (-:left) $e = :identifier <=> :lparen list($e, :comma) :rparen -> FunctionCall( name=$$, params=$2 )
      (*:left) $e = optional($e) <=> :lsquare list(:item, :comma) :rsquare -> ExprPlusList( expr=$$, params=$2 )
      (*:unary) $e = :subtract $e -> UMinus(arg=$1)
      $e = $type_name :lbrace list($e, :comma) :rbrace -> SomeOddStructure( type=$0, expr_list=$2 )
      $e = :lsquare list($e, :comma) :rsquare -> $1
      $e = :lbrace list($e, :comma) :rbrace -> $1
      $e = :lparen $e :rparen -> $1
      $e = :identifier
      $e = :number
    }
  }
}
